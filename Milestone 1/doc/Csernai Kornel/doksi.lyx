#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language magyar
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Title
Fejlett grafikai programok projektmunka, Billiárd
\end_layout

\begin_layout Author
Csernai Kornél
\end_layout

\begin_layout Section
Feladat
\end_layout

\begin_layout Standard
A csapat tagjai Bordé Sándór, Csernai Kornél és Ladányi Gergely.
 Csapatunk egy interaktív billiárdjáték megvalósítását tűzte ki célul.
 A tervek között szerepelt a fejlett kameramozgás (
\emph on
kvaterniók
\emph default
), játékmenet megvalósítása (interaktív szoftver, játékszabályok megkövetelése),
 modellezés és textúrázás (szoba: billiárd\SpecialChar \-
asztal, dákó, lámpák, padló, fal),
 és megközelítőleg realisztikus körülmények (billiárd golyók ütközése, visszapat
tanása, lyukba beleesés).
 A kitűzött célokat nagyrészt sikerült elérni.
\end_layout

\begin_layout Standard
A megoldásunk eredménye egy futtatható 
\emph on
OpenGL
\emph default
 program és a hozzá tartozó forráskód lett.
\end_layout

\begin_layout Section
Munkakörnyezet
\end_layout

\begin_layout Standard
Az OpenGL programot 
\emph on
C++
\emph default
 nyelven objektum-orientált módon, a 
\emph on
GLUT
\emph default
 könyvtár és további szabad szoftverek segítségével készítettük el, 
\emph on
Linux
\emph default
 környezetben.
 Bizonyos modellek betöltésére a 
\emph on
3DS
\emph default
 könyvtárat és a 
\emph on
Bender
\emph default
 nevű modellező szoftvert használtuk.
 A kezdetekben teszt jelleggel a 
\emph on
Box2D
\emph default
 szimulációs szoftvert használtuk a játék fizikájának modellezésére (
\emph on
ütközésdetektálás
\emph default
).
\end_layout

\begin_layout Standard
Munkánkat nagyban segítette egy verziókövető rendszer, ami esetünkben a
 Subversion volt.
 Az egyes részfeladatokat külön-külön fájlokra bontottuk, így függetlenül
 tudtunk dolgozni.
\end_layout

\begin_layout Section
Saját hozzátett munka
\end_layout

\begin_layout Standard
A keretrendszer kialakításában segítettem a csapat vezetőt.
 Ez alapvetően azt jelentette, hogy létrehoztam egy Subversion verziókövető
 lerakatot és időről-időre az elkészült kódot áttekintettem és objektum
 orientált környezetbe vittem át, a későbbi újrafelhasználás érdekében.
\end_layout

\begin_layout Standard
A játékmenet megvalósítása is részben közös munka volt, én konkrétan a fehér
 golyót szerepét, és a többi golyó lyukba esésének kezelését végeztem.
 Implementáltam a szokásos módon a 2D-s vektor osztályt, amely a számítások
 során használatos műveleteket tudta (forgatás, eltolás, skálázás, hossz,
 normalizálás, belső szorzat, stb.).
\end_layout

\begin_layout Standard
A legfőbb kontribúcióm a golyók mozgásának szimulációja volt.
 Ide tartozik:
\end_layout

\begin_layout Itemize
golyók mozgatása súrlódás mellett
\end_layout

\begin_layout Itemize
golyók ütközése egymással (mozgó gömb-gömb ütközésdetektálás)
\end_layout

\begin_layout Itemize
golyók ütközése az asztal négy oldalával (gömb-sík ütközésdetektálás)
\end_layout

\begin_layout Itemize
golyók lyukba esése (mozgó gömb - statikus gömb ütközésdetektálás)
\end_layout

\begin_layout Itemize
állóhelyzetbe kerülés detektálása
\end_layout

\begin_layout Standard
A feladat megoldása során kettő algoritmust hasonlítottam össze.
\end_layout

\begin_layout Standard
Először a Box2D nevű könyvtárat integráltam, amellyel egyszerűen lehet szimuláln
i 2D-s testek interakcióját.
 Tapasztalataim alapján a megoldás elfogadható volt, azonban az egyes konstansok
 beállítása nehézkes volt, és a perdületet nem támogatta a rendszer.
 A precizitással nem volt gond, mert a rendszer folytonos szimulációt is
 tud végezni.
\end_layout

\begin_layout Standard
Második megoldást NeHe 30-as tutorial alapján készítettem el.
 A leírásból példaprogramjából integráltam a golyók egymással ütközését
 és a golyók fallal ütközését.
 Az elkészült kód átlátható lett és az algoritmus hasonlóan jól teljesít.
\end_layout

\begin_layout Subsection
Technikai részletek
\end_layout

\begin_layout Standard
Az ütközés detektálás két részre bontható.
 Az első fázisban eldöntjük, hogy egyáltalán kell-e ütközéssel foglalkoznunk.
 Amennyiben nincs ütközés, a golyókat egyszerűen elmozgatjuk a sebességvektorukn
ak megfelelően.
 Különben az időben legközelebbi ütközést kell először megvizsgálni.
\end_layout

\begin_layout Standard
A szimuláció diszkrét módon történik, megadott lépésközzel.
 Az ütközés detektálásnál ezt kisebb időszakaszokra kell bontani.
\end_layout

\begin_layout Standard
Mivel a gömbök és a síkok száma kevés (16 és 4), így a naív módszer elegendően
 gyors eredményt ad, nincs szükség bináris partíciónálásra és egyéb módszerre.
\end_layout

\begin_layout Standard
Legyen adott az egyes golyókat reprezentáló gömbök pozíció helyvektora és
 sebesség vektora, a falakat reprezentáló sík normálvektora és a sík egy
 pontja.
\end_layout

\begin_layout Subsection
Golyók és falak
\end_layout

\begin_layout Standard
A golyók és falak ütközése lényegében mozgó gömb és statikus sík ütközését
 jelenti.
 Az ütközés detektálása elvégezhető egy sugár segítségével.
\end_layout

\begin_layout Standard
Sugár egyenlete:
\begin_inset Formula \[
P=\overrightarrow{p_{0}}+t*\overrightarrow{d}\]

\end_inset


\end_layout

\begin_layout Standard
A sík egyenlete:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\overrightarrow{N}\cdot\overrightarrow{X}=c\]

\end_inset


\end_layout

\begin_layout Standard
A kettő együtt, 
\begin_inset Formula $t$
\end_inset

 kifejezve:
\begin_inset Formula \[
t=\frac{\overrightarrow{N}\cdot(\overrightarrow{X}-\overrightarrow{p_{0}})}{\overrightarrow{N}\cdot\overrightarrow{d}}\]

\end_inset


\end_layout

\begin_layout Standard
Bizonyos esetekben kizárhatjuk az ütközést: 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\overrightarrow{N}\cdot\overrightarrow{d}=0$
\end_inset

, a síkkal párhuzamos a sugár
\end_layout

\begin_layout Itemize
\begin_inset Formula $t<0$
\end_inset

, az ütközés a sugár mögött történhetett korábban
\end_layout

\begin_layout Standard
Az ütközési pont megtalálása után az ütközés eredményét meg kell adni.
 Jelen esetben az ütközést az 
\begin_inset Formula \[
\overrightarrow{R}=2*(-\overrightarrow{O}\cdot\overrightarrow{N})*\overrightarrow{N}+\overrightarrow{O}\]

\end_inset


\end_layout

\begin_layout Standard
képlettel adhatjuk meg, ahol
\end_layout

\begin_layout Itemize
\begin_inset Formula $\overrightarrow{R}$
\end_inset

 az eredmény irányvektor,
\end_layout

\begin_layout Itemize
\begin_inset Formula $\overrightarrow{O}$
\end_inset

 a régi irányvektor,
\end_layout

\begin_layout Itemize
\begin_inset Formula $\overrightarrow{N}$
\end_inset

 az ütközési pontba eső normálvektor.
\end_layout

\begin_layout Standard
\begin_inset Formula $\overrightarrow{O}$
\end_inset

 és 
\begin_inset Formula $\overrightarrow{N}$
\end_inset

 egységvektoroknak kell lenniük, a procedúra végén 
\begin_inset Formula $\overrightarrow{N}$
\end_inset

 hosszával újra kell skálázni az eredményvektort.
\end_layout

\begin_layout Standard
C++ kódrészletek:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

bool TestIntersionPlane(const Plane& plane, const TVector& position,
\end_layout

\begin_layout Plain Layout

const TVector& direction, double& lambda, TVector& pNormal) {
\end_layout

\begin_layout Plain Layout

    double DotProduct = direction.dot(plane.normal);
\end_layout

\begin_layout Plain Layout

    double l2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // determine if ray parallel to plane
\end_layout

\begin_layout Plain Layout

    if (DotProduct < ZERO  && DotProduct > -ZERO){
\end_layout

\begin_layout Plain Layout

        return false;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    l2 = plane.normal.dot(plane.position - position) / DotProduct;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (l2 < -ZERO) {
\end_layout

\begin_layout Plain Layout

        return false;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    pNormal = plane.normal;
\end_layout

\begin_layout Plain Layout

    lambda = l2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return true;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

// ...
\end_layout

\begin_layout Plain Layout

      rt2 = movement[BallNr].mag();
\end_layout

\begin_layout Plain Layout

      movement[BallNr].unit();
\end_layout

\begin_layout Plain Layout

      movement[BallNr] = TVector::unit( (normal*
\end_layout

\begin_layout Plain Layout

                         (2*normal.dot(-movement[BallNr])))
\end_layout

\begin_layout Plain Layout

                         + movement[BallNr] );
\end_layout

\begin_layout Plain Layout

      movement[BallNr] = movement[BallNr]*rt2;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mozgó golyók egymással ütközése
\end_layout

\begin_layout Standard
Két mozgó golyó esetében nem elegendő, hogy a két sebességvektor egymást
 metszi.
 További nehézség, hogy gyorsan mozgó golyók esetén az is előfordulhat,
 hogy a golyók egymáson áthaladnak.
 Ezért a diszkrét szimulációt kisebb lépésekre kell bontani és meg kell
 vizsgálni, hogy a két gömb középpontja hogyan viszonyul egymáshoz.
 Minél kisebb lépéseket használunk, annál pontosabb lesz a szimuláció.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename grafika/Milestone 1/doc/Csernai Kornel/figure1.jpg
	scale 70

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Két mozgó golyó esete.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ha megtaláltuk az ütközési pontot, az ütközés eredményét meg kell adni.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename grafika/Milestone 1/doc/Csernai Kornel/figure4.jpg
	scale 70

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Két gömb ütközésének esete.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Legyen 
\begin_inset Formula $U_{1}$
\end_inset

 és 
\begin_inset Formula $U_{2}$
\end_inset

 a két golyó sebességvektora, vesszük ezeknek 
\begin_inset Formula $x$
\end_inset

 és 
\begin_inset Formula $y$
\end_inset

 komponenseit: 
\begin_inset Formula $U_{1x}$
\end_inset

, 
\begin_inset Formula $U_{1y}$
\end_inset

, 
\begin_inset Formula $U_{2x},$
\end_inset

 
\begin_inset Formula $U_{2y}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $V_{1}$
\end_inset

 és 
\begin_inset Formula $V_{2}$
\end_inset

 az eredmény sebességvektorok, ezeknek 
\begin_inset Formula $x$
\end_inset

 és 
\begin_inset Formula $y$
\end_inset

 komponensei: 
\begin_inset Formula $V_{1x}$
\end_inset

, 
\begin_inset Formula $V_{1y}$
\end_inset

, 
\begin_inset Formula $V_{2x},$
\end_inset

 
\begin_inset Formula $V_{2y}$
\end_inset

.
 A két gömb tömege egyenlő.
\end_layout

\begin_layout Standard
A megoldás:
\begin_inset Formula \[
V_{1x}=\frac{U_{1x}+U_{2x}-(U_{1x}-U_{2x})}{2}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
V_{2x}=\frac{U_{1x}+U_{2x}-(U_{2x}-U_{1x})}{2}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
V_{1y}=U_{1y}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
V_{2y}=U_{2y}\]

\end_inset


\end_layout

\end_body
\end_document
